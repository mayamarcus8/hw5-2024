import pathlib
from typing import Union, Tuple
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        if isinstance(data_fname, pathlib.Path):
            if data_fname.exists():
                self.data_fname = data_fname
                return
        elif isinstance(data_fname, str):
            path = pathlib.Path(data_fname)
            if path.exists():
                self.data_fname = path
                return
        else:
            message = "Invalid input: class accepts only strings and pathlib.Path objects!"
            raise TypeError(message)
        
        # Get here only if file does not exist
        message = "Invalid input: file does not exist!"
        raise ValueError(message)


    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)
    

    # Q1 - Plot the distribution of ages of the participants.
    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.
        
        Returns
        -------
        hist : np.ndarray
        Number of people in a given bin
        bins : np.ndarray
        Bin edges
        """
        bin_edges = list(range(0, 101, 10)) # List of bin edges
        hist, bins, patches = plt.hist(self.data['age'], bins=bin_edges)
        plt.title('Age distribution of the participants')
        plt.xlabel('Age')
        plt.ylabel('Count')
        return (hist, bins)
    

    # Q2 - Remove all of the rows with an invalid email address.
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
        """
        valid = self.data['email'].apply(lambda x: self.is_valid_email(x))
        return self.data.loc[valid].reset_index(drop=True)
    
    # Auxiliary function to validate email address.
    def is_valid_email(self, email: str):
        return email.count('@') == 1 and not email.startswith('@') and not email.endswith('@') and \
                '.' in email and not email.startswith('.') and not email.endswith('.') and \
                email[email.index('@') + 1] != '.'
    

    # Q3 - Replace the missing values with the mean for that subject in the other questions.
    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
        The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
        Row indices of the students that their new grades were generated
        """
        df = self.data.copy()
        rows_to_correct = []

        for index, row in df.loc[:, 'q1':'q5'].iterrows():
            if row.isnull().any():
                df.loc[index] = row.fillna(row.mean())
                rows_to_correct.append(index)

        return df, np.array(rows_to_correct)
    

    # Q4 - Each participant receives an integer score for their answers in a new "score" column.
    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        questions = self.data.loc[:, 'q1':'q5']
        self.data['score'] = questions.mean(axis=1).astype("uint8").astype("UInt8")
        self.data.loc[(questions.isna().sum(axis=1) > maximal_nans_per_sub), 'score'] = pd.NA
        return self.data
    

    # Q5 - Allocate subjects into groups based on gender and age and calculate average per question per group.
    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """
        df = self.data.copy().dropna(subset=['gender', 'age'])
        df.set_index(['gender', 'age'], append=True, inplace=True)

        return df.loc[:, 'q1':'q5'].groupby([None, lambda x: x > 40], level=['gender', 'age']).mean()